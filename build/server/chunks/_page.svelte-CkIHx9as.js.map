{"version":3,"file":"_page.svelte-CkIHx9as.js","sources":["../../../.svelte-kit/adapter-node/entries/pages/Server/_page.svelte.js"],"sourcesContent":["import { d as slot } from \"../../../chunks/index.js\";\nfunction _page($$payload, $$props) {\n  $$payload.out += `<h1>Application Maintenance</h1> <p>Using systemd: here's the .service file:</p> <pre>[Unit]\nDescription=blog.service\nAfter=network.target\n\n[Service]\nType=simple\nExecStart=bash /etc/systemd/system/blog.sh\nRestart=on-failure\nUser=u\nGroup=u\n\n[Install]\nWantedBy=multi-user.target\n</pre> <p>The bash file called by the service file instructs node to execute index.js in the build subdirectory.</p> <pre>#! /bin/bash\ncd /home/u/Apps/newblog\nPORT=3007 node build </pre> <p>Edit the application in VS Code and push it to Github. Then, in the server, where the application has been cloned, run \"git pull origin main\". Restart the .service file with \"sudo systemctl restart blog\"</p> <p>WARNING: Don't include the \"build\" subdirectory in .gitignore. Call \"npm run build\" on the desktop after revisions, then \"git push -u origin main\". Navigate to ~/Apps/newblog and call \"git pull origin main\".</p> <p>As mentioned above, call \"sudo systemctl restart blog\". That loads the revised html://localhost:(port) so Nginx can work its reverse-proxy magic on the updated process.</p> <pre>\ncat blog.schalk2.com\nserver {\n    server_name blog.schalk2.com;\n\nlocation / {\n    proxy_pass http://localhost:3007;  # Your SvelteKit port\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_cache_bypass $http_upgrade;\n    \n    # Apply the buffer settings here if you prefer\n    proxy_buffer_size 128k;\n    proxy_buffers 16 64k;\n    proxy_busy_buffers_size 128k;\n}\n\n    listen 443 ssl; # managed by Certbot\n    ssl_certificate /etc/letsencrypt/live/recursive-closures.schalk2.com/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/recursive-closures.schalk2.com/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n}\nserver {\n    if ($host = blog.schalk2.com) {\n        return 301 https://$host$request_uri;\n    } # managed by Certbot\n\n    listen 80;\n    server_name blog.schalk2.com;\n    return 404; # managed by Certbot\n} </pre> <!---->`;\n  slot($$payload, $$props, \"default\", {});\n  $$payload.out += `<!----> <br/><br/><br/><br/>`;\n}\nexport {\n  _page as default\n};\n"],"names":[],"mappings":";;AACA,SAAS,KAAK,CAAC,SAAS,EAAE,OAAO,EAAE;AACnC,EAAE,SAAS,CAAC,GAAG,IAAI,CAAC;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,CAAC;AACjB,EAAE,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,EAAE,CAAC;AACzC,EAAE,SAAS,CAAC,GAAG,IAAI,CAAC,4BAA4B,CAAC;AACjD;;;;"}